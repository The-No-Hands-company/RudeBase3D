#pragma once

#include <glm/glm.hpp>
#include <glm/vec3.hpp>
#include <glm/vec2.hpp>
#include <glm/vec4.hpp>
#include <QString>
#include <QTextStream>
#include <QRegularExpression>
#include <QVector3D>
#include <QVector2D>
#include <memory>
#include <vector>
#include <string>
#include <iostream>
#include "core/mesh_forward.hpp"

/**
 * @brief OBJ File Format Handler
 * Handles import and export of Wavefront OBJ files
 */
class OBJFileHandler {
public:
    struct ImportOptions {
        bool mergeVertices;
        bool generateNormals;
        bool generateTexCoords;
        float vertexMergeTolerance;
        ImportOptions()
            : mergeVertices(true)
            , generateNormals(true)
            , generateTexCoords(false)
            , vertexMergeTolerance(1e-6f)
        {}
    };

    struct ExportOptions {
        bool exportNormals = true;
        bool exportTexCoords = true;
        bool exportGroups = false;
        int precision = 6;
    };

    struct ImportResult {
        bool success = false;
        std::string errorMessage;
        std::vector<rude::MeshPtr> meshes;
        std::vector<std::string> meshNames;
        int vertexCount = 0;
        int faceCount = 0;
    };

public:
    // Static import/export methods
    static ImportResult importFromFile(const std::string& filePath, const ImportOptions& options = ImportOptions());
    static bool exportToFile(const std::string& filePath, rude::MeshPtr mesh, const ExportOptions& options = ExportOptions());
    static bool exportToFile(const std::string& filePath, rude::HalfEdgeMeshPtr mesh, const ExportOptions& options = ExportOptions());
    static bool exportToFile(const std::string& filePath, const std::vector<rude::MeshPtr>& meshes, const ExportOptions& options = ExportOptions());

    // Stream-based operations
    static ImportResult importFromStream(std::istream& stream, const ImportOptions& options = ImportOptions());
    static bool exportToStream(std::ostream& stream, rude::MeshPtr mesh, const ExportOptions& options = ExportOptions());
    static bool exportToStream(std::ostream& stream, rude::HalfEdgeMeshPtr mesh, const ExportOptions& options = ExportOptions());

    // Qt stream-based operations (for internal use)
    static ImportResult importFromStream(QTextStream& stream, const ImportOptions& options = ImportOptions());
    static bool exportToStream(QTextStream& stream, rude::MeshPtr mesh, const ExportOptions& options = ExportOptions());
    static bool exportToStream(QTextStream& stream, rude::HalfEdgeMeshPtr mesh, const ExportOptions& options = ExportOptions());

private:
    // Internal parsing methods
    static bool parseVertex(const std::vector<std::string>& tokens, glm::vec3& vertex);
    static bool parseNormal(const std::vector<std::string>& tokens, glm::vec3& normal);
    static bool parseTexCoord(const std::vector<std::string>& tokens, glm::vec2& texCoord);
    static bool parseFace(const std::vector<std::string>& tokens, std::vector<int>& vertexIndices,
                         std::vector<int>& texCoordIndices, std::vector<int>& normalIndices);

    // Mesh building
    static rude::MeshPtr buildMesh(const std::vector<glm::vec3>& vertices,
                            const std::vector<glm::vec3>& normals,
                            const std::vector<glm::vec2>& texCoords,
                            const std::vector<std::vector<int>>& faces,
                            const std::vector<std::vector<int>>& texCoordFaces,
                            const std::vector<std::vector<int>>& normalFaces,
                            const ImportOptions& options);

    // Vertex merging
    static void mergeVertices(std::vector<rude::Vertex>& vertices, std::vector<unsigned int>& indices, float tolerance);

    // Normal generation
    static void generateNormals(std::vector<rude::Vertex>& vertices, const std::vector<unsigned int>& indices);

    // Utility methods
    static QString formatFloat(float value, int precision);
    static int parseIndex(const QString& indexStr, int maxIndex);
};

/**
 * @brief STL File Format Handler
 * Handles import and export of STL files (ASCII and Binary)
 */
class STLFileHandler {
public:
    enum class Format {
        ASCII,
        Binary,
        Auto // Detect automatically
    };

    struct ImportOptions {
        Format format = Format::Auto;
        bool mergeVertices = true;
        float vertexMergeTolerance = 1e-6f;
    };

    struct ExportOptions {
        Format format = Format::ASCII;
        std::string header = "Generated by RudeBase3D";
    };

    struct ImportResult {
        bool success = false;
        std::string errorMessage;
        rude::MeshPtr mesh;
        int triangleCount = 0;
        Format detectedFormat = Format::ASCII;
    };

public:
    // Static import/export methods
    static ImportResult importFromFile(const std::string& filePath, const ImportOptions& options = ImportOptions());
    static bool exportToFile(const std::string& filePath, rude::MeshPtr mesh, const ExportOptions& options = ExportOptions());
    static bool exportToFile(const std::string& filePath, rude::HalfEdgeMeshPtr mesh, const ExportOptions& options = ExportOptions());

private:
    // Format detection
    static Format detectFormat(const std::string& filePath);
    // ASCII STL methods
    // TODO: Implement ASCII STL import/export using std::istream/std::ostream
    // Binary STL methods
    // TODO: Implement binary STL import/export using std::ifstream/std::ofstream
    // Utility methods
    // TODO: Implement vector parsing using std::vector<std::string> and glm::vec3
};

/**
 * @brief PLY File Format Handler
 * Handles import and export of PLY (Polygon File Format) files
 */
class PLYFileHandler {
public:
    struct ImportOptions {
        bool mergeVertices = false;
        float vertexMergeTolerance = 1e-6f;
    };

    struct ExportOptions {
        bool binary = false;
        bool exportNormals = true;
        bool exportColors = true;
    };

    struct ImportResult {
        bool success = false;
        std::string errorMessage;
        rude::MeshPtr mesh;
        int vertexCount = 0;
        int faceCount = 0;
        bool hasNormals = false;
        bool hasColors = false;
    };

public:
    // Static import/export methods
    static ImportResult importFromFile(const std::string& filePath, const ImportOptions& options = ImportOptions());
    static bool exportToFile(const std::string& filePath, rude::MeshPtr mesh, const ExportOptions& options = ExportOptions());
    static bool exportToFile(const std::string& filePath, rude::HalfEdgeMeshPtr mesh, const ExportOptions& options = ExportOptions());

private:
    // Header parsing
    // TODO: Implement header parsing using std::istream and std::vector<std::string>
    // Data parsing
    // TODO: Implement vertex/face parsing using std::vector and glm types
};

/**
 * @brief File Format Manager
 * Manages all file format handlers and provides a unified interface
 */
class FileFormatManager {
public:
    enum class Format {
        OBJ,
        STL,
        PLY,
        Unknown
    };
    
    struct ImportResult {
        bool success = false;
        QString errorMessage;
        std::vector<rude::MeshPtr> meshes;
        std::vector<QString> meshNames;
        Format detectedFormat = Format::Unknown;
        QString filePath;
    };

public:
    // Format detection
    static Format detectFormat(const QString& filePath);
    static QStringList getSupportedImportExtensions();
    static QStringList getSupportedExportExtensions();
    
    // Unified import/export
    static ImportResult importFile(const QString& filePath);
    static bool exportFile(const QString& filePath, rude::MeshPtr mesh);
    static bool exportFile(const QString& filePath, rude::HalfEdgeMeshPtr mesh);
    static bool exportFile(const QString& filePath, const std::vector<rude::MeshPtr>& meshes);
    
    // Format-specific options
    static void setOBJImportOptions(const OBJFileHandler::ImportOptions& options);
    static void setOBJExportOptions(const OBJFileHandler::ExportOptions& options);
    static void setSTLImportOptions(const STLFileHandler::ImportOptions& options);
    static void setSTLExportOptions(const STLFileHandler::ExportOptions& options);
    static void setPLYImportOptions(const PLYFileHandler::ImportOptions& options);
    static void setPLYExportOptions(const PLYFileHandler::ExportOptions& options);

private:
    static OBJFileHandler::ImportOptions s_objImportOptions;
    static OBJFileHandler::ExportOptions s_objExportOptions;
    static STLFileHandler::ImportOptions s_stlImportOptions;
    static STLFileHandler::ExportOptions s_stlExportOptions;
    static PLYFileHandler::ImportOptions s_plyImportOptions;
    static PLYFileHandler::ExportOptions s_plyExportOptions;
};
